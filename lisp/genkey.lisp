(defpackage work (:use common-lisp elliptic))
(in-package work)

(defun sign-encode (p m)
  (multiple-value-bind (r s) (sign (decode1-string p) m)
    (values
      (encode1-string r)
      (encode1-string s))))

(defun verify-decode (q m r s)
  (verify (decode2-string q) m (decode1-string r) (decode1-string s)))

(defun make-elliptic-key ()
  (let* ((p1 (with-elliptic-secp256k1 (make-private)))
         (p2 (with-elliptic-secp256r1 (make-private)))
         (p3 (with-elliptic-ed25519   (make-private)))
         (p4 (with-elliptic-ed448     (make-private)))
         (q1 (with-elliptic-secp256k1 (make-public p1)))
         (q2 (with-elliptic-secp256r1 (make-public p2)))
         (q3 (with-elliptic-ed25519   (make-public p3)))
         (q4 (with-elliptic-ed448     (make-public p4)))
         (x1 (with-elliptic-secp256k1 (encode1-string p1)))
         (x2 (with-elliptic-secp256r1 (encode1-string p2)))
         (x3 (with-elliptic-ed25519   (encode1-string p3)))
         (x4 (with-elliptic-ed448     (encode1-string p4)))
         (y1 (with-elliptic-secp256k1 (encode2-string q1)))
         (y2 (with-elliptic-secp256r1 (encode2-string q2)))
         (y3 (with-elliptic-ed25519   (encode2-string q3)))
         (y4 (with-elliptic-ed448     (encode2-string q4)))
         (ms "Hello")
         (mv (map 'vector #'char-code ms))
         r1 r2 r3 r4
         s1 s2 s3 s4)
    (format t "[private]~%")
    (format t "secp256k1: ~S~%" x1)
    (format t "secp256r1: ~S~%" x2)
    (format t "ed25519  : ~S~%" x3)
    (format t "ed448    : ~S~%" x4)
    (format t "~2&[public]~%")
    (format t "secp256k1: ~S~%" y1)
    (format t "secp256r1: ~S~%" y2)
    (format t "ed25519  : ~S~%" y3)
    (format t "ed448    : ~S~%" y4)

    (multiple-value-setq (r1 s1) (with-elliptic-secp256k1 (sign-encode x1 mv)))
    (multiple-value-setq (r2 s2) (with-elliptic-secp256r1 (sign-encode x2 mv)))
    (multiple-value-setq (r3 s3) (with-elliptic-ed25519 (sign-encode x3 mv)))
    (multiple-value-setq (r4 s4) (with-elliptic-ed448 (sign-encode x4 mv)))
    (format t "~2&[sign] ~S~%" ms)
    (format t "secp256k1.r: ~S~%" r1)
    (format t "secp256k1.s: ~S~%" s1)
    (format t "secp256r1.r: ~S~%" r2)
    (format t "secp256r1.s: ~S~%" s2)
    (format t "ed25519.r  : ~S~%" r3)
    (format t "ed25519.s  : ~S~%" s3)
    (format t "ed448.r    : ~S~%" r4)
    (format t "ed448.s    : ~S~%" s4)
    (format t "~2&[verify] ~S~%" ms)
    (format t "secp256k1: ~A~%" (with-elliptic-secp256k1 (verify-decode y1 mv r1 s1)))
    (format t "secp256r1: ~A~%" (with-elliptic-secp256r1 (verify-decode y2 mv r2 s2)))
    (format t "ed25519  : ~A~%" (with-elliptic-ed25519 (verify-decode y3 mv r3 s3)))
    (format t "ed448    : ~A~%" (with-elliptic-ed448 (verify-decode y4 mv r4 s4)))
    ))

(let ((*random-state* (make-random-state t)))
  (make-elliptic-key))

